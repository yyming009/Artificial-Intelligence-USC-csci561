package homework;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;

public class homework {
	
	static int numOfQuery;
	static int numOfKb;
	static String[] query;
	static String[] kb;
	
	static LinkedList<Map<String, LinkedList<String>>> compareList = new LinkedList<Map<String, LinkedList<String>>>();
	static Map<String,String> substiCheck = new HashMap<String,String>();

	public static void main(String[] args) {
		
		String pathName = "input1.txt";
		File file = new File(pathName);		
		
		Scanner input = null;
		try {
			input = new Scanner(file);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		//get the number of queries
		numOfQuery = Integer.parseInt(input.nextLine());
		query = new String[numOfQuery];
		//store each query of each line into query array
		for (int i = 0; i < numOfQuery && input.hasNextLine(); ++i) {
			query[i] = input.nextLine();
			//System.out.println(query[j]);
		}

		//get the number of kb
		numOfKb = Integer.parseInt(input.nextLine());
		kb = new String[numOfKb];
		//store each kb of each line into query array
		for(int j = 0; j < numOfKb && input.hasNextLine(); ++j) { 
		    kb[j] = input.nextLine();
			//System.out.println(kb[j]);
		}

		for (int j = 0; j < numOfKb; ++j) {
			bulidSearchMap(kb[j]);
		}
		
		for(int i = 0; i < numOfQuery; ++i) {
			resolution(query[i]);
		}
	}
	
	private static void bulidSearchMap(String sen_kb) {
		String s = "";
		for (int i = 0; i < sen_kb.length(); ++i) {
			if (sen_kb.charAt(i) != ' ') {
				s += (sen_kb.charAt(i));
			}
		}
		//System.out.println(s);
		
		Map<String, LinkedList<String>> tempMap = new HashMap<String, LinkedList<String>>();
		
		String[] orDivide = s.split("\\|");
		for (int i = 0; i < orDivide.length; ++i) {
			String sep = orDivide[i];
			char[] char_sep = sep.toCharArray();
			LinkedList<String> tempList;
			
			String key="";
			for (char ch : char_sep) {
				if (ch == '(') {
					break;
				}
				key += ch;
			}
			
			if(tempMap.containsKey(key)) {
				tempList = tempMap.get(key);
				tempList.add(sep);
			} else {
				tempList = new LinkedList<String>();
				tempList.add(sep);
				tempMap.put(key,tempList);
			}
		}
		compareList.add(tempMap);
		//System.out.println(compareList);
	}
	
	private static void resolution(String s) {
//		if(s.charAt(0)=='~') {
//			s = s.substring(1, s.length());
//		} else {
//			s = '~' + s;
//		}
		List<String> li = new LinkedList<String>();
		li.add(s);
		
		Map<String,String> map= new HashMap<String,String>();
		
		//check.clear();
		//ind=0;
		
		String sub = substitute(li);
		//System.out.println(a);
		//print.add(a);
	}
	
	private static String substitute(List<String> li) {
		
//******************************************************handle to query********************************************************		
		for (int i = 0; i < li.size(); ++i) {
			String s = li.get(i);			
			char[] char_query = s.toCharArray();
			
			String constant = "", argument = "";
			
			//get the constant
			int index = 0;
			while (index < char_query.length) {
				if (char_query[index] == '(') {
					index++;
					break;
				}
				constant += char_query[index];
				index++;
			}
			
			//get the argument, split each argument then store it in qryarg_split
			for (int j = index; j < char_query.length; ++j) {
				if (char_query[j] ==  ')') {
					break;
				}
				if (char_query[j] == ' ') {
					continue;
				}
				argument += char_query[j];
			}
			String[] qryarg_split = argument.split("\\,");
						
			
//******************************************************handle to kb sentences********************************************************		

			//For every query, try to check if it matches every sentence in KB
			for(int m = 0; m < compareList.size(); ++m) {
				//get the every line of sentence in kb
				Map<String, LinkedList<String>> tempMap = new HashMap<String, LinkedList<String>>();
				tempMap = compareList.get(m);
				
				//use iterator to traverse the keyset in every hashmap positted in every index of comparaList
				Iterator<Entry<String, LinkedList<String>>> iter = tempMap.entrySet().iterator();
								
				String mapKey="", variables="";
				String mapValue = "";
				String variable = "";
				
				char[] var;
				boolean flag = false;
				
				while (iter.hasNext()) {
					//get the constant in KB
					Map.Entry pair = (Map.Entry)iter.next();
					mapKey = pair.getKey().toString();
					
					String[] kbvar_split;

					if (constant.equals(mapKey)) {
						flag = true;
					}
					
					if(flag) {
						mapValue = pair.getValue().toString();
						char[] char_value = mapValue.toCharArray();
						
						//get the variables of each kb stored in kbvar_split
						for(int k = 0; k < char_value.length; ++k){
							if(char_value[k] == '('){
								++k;
								while(char_value[k] != ')'){
									variable += char_value[k++];	
								}
							}
						}
						kbvar_split = variable.split("\\,");	
					}		
					
					if (kbvar_split.length == qryarg_split.length) {
						
						HashMap<String,String> map1 = new HashMap();
						String[] sub = new String[kbvar_split.length];
						
						for(int ind=0; ind < kbvar_split.length; ++ind) {
							if(kbvar_split[ind].length()==1 && Character.isLowerCase(kbvar_split[ind].charAt(0)) || qryarg_split[ind].length()==1 && Character.isLowerCase(argument.charAt(ind))) {

								sub[ind]=kbvar_split[ind];

								if(!substiCheck.containsKey(qryarg_split[ind])){
									substiCheck.put(qryarg_split[ind], kbvar_split[ind]);
								}else{
									substiCheck.replace(qryarg_split[ind], kbvar_split[ind]);
								}
								
								map1.put(constant_split[y], var_split[y]);
							}
							
							if(constant_split[y].equals(var_split[y]))
								x2[y]=var_split[y];
						}
					}
				
				}
				
		}
		
	}
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
