package homework;

import java.util.LinkedList;
import java.util.Queue;

public class BFS {
	
	private int numOfRange = new InputStream().getNumOfRange();
	private Queue<int[][]> queue = new LinkedList<int[][]>();
	
	public void bfsSearch() {
		
		Queue<int[][]> rowQueue = new LinkedList<int[][]>();
		
		Node node = new Node();
		int[][] nursery = node.getNode();
		
		
		queue.add(nursery);
		rowQueue.add(nursery);
		
		for (int i = 0; i < numOfRange; i++) {	
			int numOfTree = 0;
			for (int j = 0; j < numOfRange; j++) {
				if (nursery[i][j] == 2) {
					numOfTree++;
				}
			}
			
			int[] positionOfTree = new int[numOfTree];
			for (int j = 0; j < numOfRange; j++) {
				int k = 0;
				if (nursery[i][j] == 2) {
					positionOfTree[k++] = j;
				}
			}
			
			if (numOfTree == 0) {
				for (int j = 0; j < numOfRange; j++) {
					nursery[i][j] = 1;
					if (Check.check(nursery)) {
						queue.add(nursery);
						rowQueue.add(nursery);
					}
					nursery[i][j] = 0;
				}
			} else {
				for (int j = 0; j < positionOfTree[0]; j++) {
					nursery[i][j] = 1;
					if (Check.check(nursery)) {
						queue.add(nursery);
						rowQueue.add(nursery);
					}
					nursery[i][j] = 0;
				}
				
				if(numOfTree > 1) {
					for (int k = 1; k < numOfTree; k++) {
						
						for (int j = positionOfTree[k-1]; j < positionOfTree[k]; j++) {
							nursery[i][j] = 1;
							if (Check.check(nursery)) {
								queue.add(nursery);
								rowQueue.add(nursery);
							}
							nursery[i][j] = 0;
						}
					}
				}
				
				for (int j = positionOfTree[numOfTree-1]; j < numOfRange; j++) {
					nursery[i][j] = 1;
					if (Check.check(nursery)) {
						queue.add(nursery);
						rowQueue.add(nursery);
					}
					nursery[i][j] = 0;
				}
			}
						
			
		}
		
		
		
		
	}
}
