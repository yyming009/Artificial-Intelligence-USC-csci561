package homework;

public class DFS {
	
	private int numOfLizard = new InputStream().getNumOfLizard();
	private int numOfRange = new InputStream().getNumOfRange();
    /* A recursive utility function to solve N
       Queen problem */
	
	public int numOfLizard(int board[][]) {
		int count = 0;
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				if (board[i][j] == 1) {
					count++;
				}
			}
		}
		return count;
	}
	
    public boolean dfsSearch(int board[][], int col)
    {
        /* base case: If all queens are placed
           then return true */
        if (numOfLizard(board) == numOfLizard && col <= numOfRange) {
            return true;
        }
 
        /* Consider this column and try placing
           this queen in all rows one by one */
        for (int i = 0; i < numOfRange; i++) {
        	
        	if (board[i][col] == 2) {
        		continue;
        	}
        	
            board[i][col] = 1;
            
            if (Check.check(board)) {
               
                /* recur to place rest of the queens */
                if (dfsSearch(board, col + 1) == true)
                    return true;
 
                /* If placing queen in board[i][col]
                   doesn't lead to a solution then
                   remove queen from board[i][col] */
                board[i][col] = 0; // BACKTRACK
            }
        }
 
        /* If queen can not be place in any row in
           this colum col, then return false */
        return false;
    }
 
    public void solveDFS() {
    	
    	Node node = new Node();
		int[][] nursery = node.getNode();
		
        if (dfsSearch(nursery, 0) == false) { 
        	System.out.println("FAIL");
        } else {
        	printSolution(nursery);
        }
        
    }
    
    void printSolution(int board[][]){
        for (int i = 0; i < numOfRange; i++){
            for (int j = 0; j < numOfRange; j++) {
            	System.out.print(board[i][j]);
            }    
            System.out.println();
        }
    }
}
